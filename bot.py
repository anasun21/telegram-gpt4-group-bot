import os
import logging
import sqlite3
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)

# –ö–ª—é—á—ñ
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ SQLite
conn = sqlite3.connect('session.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS sessions
             (chat_id INTEGER PRIMARY KEY, prompt TEXT, history TEXT)''')
conn.commit()

# ============================
# –ö–æ–º–∞–Ω–¥–∏
# ============================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ñ—Ç–∞—é! –Ø ‚Äî GPT-4 —Ñ–∞—Å–∏–ª—ñ—Ç–∞—Ç–æ—Ä. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /setprompt, —â–æ–± –∑–∞–¥–∞—Ç–∏ —Ä–æ–ª—å.\n/help ‚Äî –¥–æ–ø–æ–º–æ–≥–∞.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/setprompt [—Ç–µ–∫—Å—Ç] ‚Äî –∑–∞–¥–∞—Ç–∏ —Ä–æ–ª—å –±–æ—Ç–∞\n"
        "/reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!"
    )

async def setprompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = ' '.join(context.args)
    if not prompt:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏.")
        return
    chat_id = update.effective_chat.id
    c.execute("INSERT OR REPLACE INTO sessions (chat_id, prompt, history) VALUES (?, ?, ?)", (chat_id, prompt, ""))
    conn.commit()
    await update.message.reply_text(f"‚úÖ –ù–æ–≤–∏–π –ø—Ä–æ–º—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    c.execute("UPDATE sessions SET history = '' WHERE chat_id = ?", (chat_id,))
    conn.commit()
    await update.message.reply_text("üóë –Ü—Å—Ç–æ—Ä—ñ—é –æ—á–∏—â–µ–Ω–æ.")

# ============================
# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
# ============================

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_message = update.message.text

    # –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Å—ñ—é
    c.execute("SELECT prompt, history FROM sessions WHERE chat_id = ?", (chat_id,))
    row = c.fetchone()

    if row:
        prompt, history = row
    else:
        prompt = "–¢–∏ ‚Äî –¥—Ä—É–∂–Ω—ñ–π GPT-4 –∞—Å–∏—Å—Ç–µ–Ω—Ç."
        history = ""
        c.execute("INSERT INTO sessions (chat_id, prompt, history) VALUES (?, ?, ?)", (chat_id, prompt, ""))
        conn.commit()

    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    messages = []
    if prompt:
        messages.append({"role": "system", "content": prompt})

    if history:
        for line in history.split("|||"):
            if "::" in line:
    role, content = line.split("::", 1)
else:
    # –Ø–∫—â–æ –Ω–µ–º–∞ ::, –≤–≤–∞–∂–∞–π —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    role, content = "user", line
            messages.append({"role": role, "content": content})

    messages.append({"role": "user", "content": user_message})

    # –í–∏–∫–ª–∏–∫ OpenAI
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=messages
    )

    reply = response.choices[0].message.content

    # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
    new_history = history + f"user::{user_message}|||assistant::{reply}|||"
    c.execute("UPDATE sessions SET history = ? WHERE chat_id = ?", (new_history, chat_id))
    conn.commit()

    await update.message.reply_text(reply)

# ============================
# –û—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞
# ============================

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("setprompt", setprompt))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == '__main__':
    main()
